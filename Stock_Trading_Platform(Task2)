package CodeAlpha;
import java.util.*;

class Stock 
{
    String symbol;
    double price;

    Stock(String symbol, double price)
    {
        this.symbol = symbol;
        this.price = price;
    }
}

class Market
{
    private Map<String, Stock> stocks = new HashMap<>();

    public void addStock(String symbol, double price) 
    {
        stocks.put(symbol, new Stock(symbol, price));
    }

    public Stock getStock(String symbol) 
    {
        return stocks.get(symbol);
    }

    public void updatePrice(String symbol, double newPrice) 
    {
        if (stocks.containsKey(symbol))
        {
            stocks.get(symbol).price = newPrice;
        }
    }

    public void displayMarket() 
    {
        System.out.println("--- Market Data ---");
        for (Stock stock : stocks.values())
        {
            System.out.println(stock.symbol + ": $" + stock.price);
        }
    }
}

class Portfolio 
{
    private Map<String, Integer> holdings = new HashMap<>();
    private double balance;

    public Portfolio(double startingBalance)
    {
        this.balance = startingBalance;
    }

    public void buyStock(Market market, String symbol, int quantity) 
    {
        Stock stock = market.getStock(symbol);
        if (stock == null)
        {
            System.out.println("Stock not found.");
            return;
        }

        double totalCost = stock.price * quantity;
        if (totalCost > balance)
        {
            System.out.println("Insufficient balance.");
        } else
        {
            balance -= totalCost;
            holdings.put(symbol, holdings.getOrDefault(symbol, 0) + quantity);
            System.out.println("Bought " + quantity + " shares of " + symbol);
        }
    }

    public void sellStock(Market market, String symbol, int quantity)
    {
        Stock stock = market.getStock(symbol);
        if (stock == null || !holdings.containsKey(symbol) || holdings.get(symbol) < quantity) {
            System.out.println("Invalid sell request.");
            return;
        }

        double totalRevenue = stock.price * quantity;
        holdings.put(symbol, holdings.get(symbol) - quantity);
        if (holdings.get(symbol) == 0) holdings.remove(symbol);
        balance += totalRevenue;
        System.out.println("Sold " + quantity + " shares of " + symbol);
    }

    public void displayPortfolio(Market market) 
    {
        System.out.println("--- Portfolio ---");
        System.out.println("Balance: $" + balance);
        for (String symbol : holdings.keySet())
        {
            int quantity = holdings.get(symbol);
            double price = market.getStock(symbol).price;
            System.out.println(symbol + " - Shares: " + quantity + ", Current Price: $" + price);
        }
    }
}

public class StockTradingPlatform 
{
    public static void main(String[] args)
    {
        Market market = new Market();
        market.addStock("AAPL", 150.0);
        market.addStock("GOOGL", 2800.0);
        market.addStock("TSLA", 700.0);

        Portfolio portfolio = new Portfolio(10000.0);

        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running)
        {
            System.out.println("\n1. View Market\n2. Buy Stock\n3. Sell Stock\n4. View Portfolio\n5. Exit");
            System.out.print("Select an option: ");
            int option = scanner.nextInt();

            switch (option)
            {
                case 1:
                       market.displayMarket();
                       break;
                case 2:
                       System.out.print("Enter stock symbol to buy: ");
                       String buySymbol = scanner.next();
                       System.out.print("Enter quantity to buy: ");
                       int buyQty = scanner.nextInt();
                       portfolio.buyStock(market, buySymbol, buyQty);
                       break;
                case 3:
                       System.out.print("Enter stock symbol to sell: ");
                       String sellSymbol = scanner.next();
                       System.out.print("Enter quantity to sell: ");
                       int sellQty = scanner.nextInt();
                       portfolio.sellStock(market, sellSymbol, sellQty);
                       break;
                case 4:
                       portfolio.displayPortfolio(market);
                       break;
                case 5:
                       System.out.println("Exiting...");
                       running = false;
                       break;
                default:
                        System.out.println("Invalid option.");
            }
        }
        scanner.close();
    }
}
